name: CI/CD Deployment Pipeline

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

# âœ… Extra Challenge 1: Concurrency group
concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ci:
    name: "CI (Lint + Test)"
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'

    - name: Create package.json
      run: |
        echo '{
          "name": "multi-branch-env-deploy",
          "version": "1.0.0",
          "scripts": {
            "test": "echo \"Tests passed!\" && exit 0",
            "lint": "echo \"Linting passed!\" && exit 0"
          }
        }' > package.json

    - name: Install dependencies
      run: npm install

    - name: Run Tests
      run: npm test

    - name: Create test report
      run: |
        mkdir -p test-results
        echo "Tests completed at $(date)" > test-results/report.txt
        echo "Status: âœ… SUCCESS" >> test-results/report.txt

    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-report
        path: test-results/

  deploy_qa:
    name: "Deploy to QA"
    runs-on: ubuntu-latest
    # âœ… Extra Challenge 2: Fail fast
    needs: ci
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'

    steps:
    - name: Download test results
      uses: actions/download-artifact@v4
      with:
        name: test-report

    - name: Deploy to QA Environment
      run: |
        echo "ðŸš€ DEPLOYING TO QA ENVIRONMENT"
        echo "Test results:"
        cat test-results/report.txt
        echo "âœ… QA Deployment Completed Successfully!"

  deploy_prod:
    name: "Deploy to Production"
    runs-on: ubuntu-latest
    # âœ… Extra Challenge 2: Fail fast
    needs: ci
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: Download test results
      uses: actions/download-artifact@v4
      with:
        name: test-report

    - name: Deploy to Production
      run: |
        echo "ðŸŽ‰ DEPLOYING TO PRODUCTION ENVIRONMENT!"
        echo "Test results:"
        cat test-results/report.txt
        echo "âœ… Production Deployment Completed Successfully!"

    # âœ… Extra Challenge 3: Slack Notification
    - name: Send Slack Notification
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#team-deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    # Fallback if webhook not configured
    - name: Simulate Notification
      if: success() && secrets.SLACK_WEBHOOK_URL == ''
      run: |
        echo "ðŸ“¢ SLACK NOTIFICATION (Simulated)"
        echo "Webhook URL: ${{ secrets.SLACK_WEBHOOK_URL }}"
        echo "Channel: #team-deployments"
        echo "Message: Production deployment completed successfully! âœ…"
        echo "Repository: ${{ github.repository }}"
        echo "By: ${{ github.actor }}"
