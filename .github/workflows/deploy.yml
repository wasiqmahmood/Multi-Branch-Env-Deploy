name: Multi-Branch Deployment

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ci:
    name: "CI (Lint + Test)"
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'

    - name: Create package.json if missing
      run: |
        if [ ! -f package.json ]; then
          echo '{
            "name": "multi-branch-env-deploy",
            "version": "1.0.0",
            "scripts": {
              "lint": "echo \"Linting passed!\" && exit 0",
              "test": "echo \"Tests passed!\" && exit 0"
            }
          }' > package.json
        fi

    - name: Create package-lock.json
      run: npm install --package-lock-only

    - name: Install dependencies
      run: npm ci

    - name: Run Linter
      run: npm run lint

    - name: Run Tests
      run: npm test

    - name: Create test report artifact
      run: |
        mkdir -p test-results
        echo "Tests completed successfully at $(date)" > test-results/report.txt
        echo "Linting completed successfully" >> test-results/report.txt

    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: test-report
        path: test-results/

  deploy_qa:
    name: "Deploy to QA"
    runs-on: ubuntu-latest
    needs: ci
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev'

    steps:
    - name: Download test results
      uses: actions/download-artifact@v4
      with:
        name: test-report

    - name: Simulate QA Deployment
      run: |
        echo "Deploying to QA Environment..."
        echo "Test results:"
        cat test-results/report.txt
        echo "QA Deployment completed successfully!"

  deploy_prod:
    name: "Deploy to Production"
    runs-on: ubuntu-latest
    needs: ci
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Download test results
      uses: actions/download-artifact@v4
      with:
        name: test-report

    - name: Simulate Production Deployment
      run: |
        echo "DEPLOYING TO PRODUCTION!"
        echo "Test results:"
        cat test-results/report.txt
        echo "Production Deployment completed successfully!"

    - name: Send deployment notification
      if: success()
      run: |
        echo "SIMULATED NOTIFICATION: Production deployment successful!"
        echo "Repository: ${{ github.repository }}"
        echo "Branch: ${{ github.ref }}"
        echo "Commit: ${{ github.sha }}"
        echo "Time: $(date)"
        echo "--- This would send to Slack/Teams in a real setup ---"
